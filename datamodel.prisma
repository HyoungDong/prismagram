type User {
  id: ID! @id
  username: String! @unique
  email : String! @unique
  firstName: String @default(value:"")
  lastName:String
  posts: [Post!]! @relation(name: "PostsOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE) 
  comments: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
  bio : String
  followers: [User!]! @relation(name: "FollowRelation")
  following: [User!]! @relation(name: "FollowRelation")
  rooms : [Room!]!
  loginSecret: String
}

type Post{
  id: ID! @id
  files:[File!]! @relation(name: "FilesOfPost", onDelete: CASCADE)
  location: String
  caption: String! 
  likes: [Like!]! @relation(name: "LikesOfPost", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsOfPost", onDelete: CASCADE)
  user:User! @relation(name: "PostsOfUser")
}

type Like{
  id: ID! @id
  user: User! @relation(name: "LikesOfUser")
  post: Post! @relation(name: "LikeOfPost")

}

type Comment{
  id: ID! @id
  text:String!
  user: User! @relation(name: "CommentsOfUser")
  post: Post! @relation(name: "CommentOfPost")
}

type File{
  id: ID! @id
  url:String!
  post: Post! @relation(name: "FilesOfPost")
}

type Room{
  id: ID! @id
  participants: [User!]!
  messages : [Message!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Message{
  id: ID! @id
  text : String!
  from: User! @relation(name: "From")
  to: User! @relation(name: "To")
  room : Room!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}